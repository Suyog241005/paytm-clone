datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  transactions  OnRampTransaction[]

  sentTransfer    P2pTransfer[] @relation("Sender")
  recieveTransfer P2pTransfer[] @relation("Reciever")

  sentRamp    P2pOnRampTransaction[] @relation("Sender")
  recieveRamp P2pOnRampTransaction[] @relation("Reciever")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Balance   Balance?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model OnRampTransaction {
  id        String       @id @default(cuid())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model P2pOnRampTransaction {
  id         String       @id @default(cuid())
  status     OnRampStatus
  provider   String
  amount     Int
  startTime  DateTime     @default(now())
  senderId   String
  recieverId String
  sender     User         @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  reciever   User         @relation("Reciever", fields: [recieverId], references: [id], onDelete: Cascade)
}

model Balance {
  id     String @id @default(cuid())
  userId String @unique
  amount Int
  locked Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model P2pTransfer {
  id         String   @id @default(cuid())
  senderId   String   @unique
  recieverId String   @unique
  amount     Int
  timeStamp  DateTime @default(now())
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  reciever   User     @relation("Reciever", fields: [recieverId], references: [id], onDelete: Cascade)
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
